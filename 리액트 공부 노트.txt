I. JSX
1. 개념
JSX는 xml-like syntax를 native javascript로 변환해준다.
""로 감싸지 않는다.
()가 없어도 오류 발생하지 않지만 가독성을 위해 추가해준다.

2.Nested Element
// 에러 발생 코드
render() {
  return(
    <h1>Hi</h1>
    <h2>I am Error</h2>
  )
}

// component에서 여러 element를 rendering할 때 꼭 container element 안에 포함시켜야 한다.
render() {
  return(
    <div>
      <h1>Hi</h1>
      <h2>I am Error</h2>
    </div>
    )
}
2. JavaScript Expression
//JSX 안에서 JavaScript를 쓰려면 {}안에 넣으면됨

render() {
  let text = "Hello React!"; // var와 마찬가지로 변수를 선언하는 방식이지만, var 는 function scope이라면 let은 block scope이고 한번 선언하면 변경불가. 평상시에 변수 쓸 땐 let을 사용하는게 convention
  return (
    <div>{text}</div>
  );
}

//If else 문은 JSX에서 사용불가 이에 대한 대안은 ternary expression => condition ? true : false

render() {
  var inputNumber = 1;
  return (
    <p>{inputNumber == 1 ? 'True':'Fase'}</p>
  );
}

3.Inline Style
//JSX에서 style을 설정할 때, String 형식을 사용하지 않고 key가 camalCase인 객체가 사용됨

render() {
  let style = {
    color:'aqua',
    backgroundColor:'black'
  };

  return (
    <div style={style}>React CodeLab</div>
  );
}

//JSX안에서 class를 설정할 때는 class=이 아닌 className=을 사용

render() {
 return (
  <div className="box">React CodeLab</div>
 );
}

4. Comment
// JSX안에서 주석을 작성할 때 { /* ... */} 형식으로 작성
// Container element안에서 작성되어야함 (ex. 모든걸 포함하는 <div>안에서)

render() {
  return (
    <div>
      {/* This is */}
      {/* example of
        multi-line comment*/}
      React CodeLab
    </div>
  );
}
II. Props
1.개념
Component 내부의 Immutable Data
JSX 내부에 { this.props.propsName}
컴포넌트를 사용 할 때, <> 괄호 안에 propsName="value"
this.props.children은 기본적으로 갖고있는 props로서, <Cpnt> 여기에 있는 값이 들어간다.</Cpnt>

<div>
<h1>Hello {this.props.name}</h1>
<div>{this.props.children}</div>
</div>

2. 기본값 설정
Component.defaultProps = { ... }

class App extends React.Component {
  render() {
    return (
      <div> {this.props.value}</div>
    );
  }
};

App.defaultProps = {
  value:0
};

3.Type 검증
Component.propTypes = { ... }

class App extends React.Component {
  render() {
    return (
      <div>
        {this.props.value}
        {this.props.secondValue}
        {this.props.thirdValue}
      </div>
    );
  }
};

App.propTypes = {
  value:React.propTypes.string,
  secondValue:React.PropType.number,
  thirdValue:React.PropTypes.any.isRequired,

};

III. State

1. 개념
유동적인 Data
JSX 내부에 {this.state.stateName}
초기값 설정이 필수, Constructor에서 this.state = {}으로 설정
값을 수정할 때에는 this.setState({...}), rending 후에 this.state = 절대 사용하지 말것

ex)
class Counter extends React.Component {
  constructor(props) {
    super(props); //super를 사용해야 이 속의 setter와 this.state = 를 사용할 수 있음
    this.state = {
      value:0
    };
    this.handleClick = this.handleClick.bind(this); // javascript에서는 어떤 객체를 사용할지 모르기 때문에 binding이 필요함
  }

 handleClick() {
   this.setState({
     value: this.state.value + 1
   });
   /*
    안좋은 예
    this.state.value = this.state.value + 1;
    this.forceUpdate();
   */
 }

  render() {
    return(
      <div>
        <h2>{this.state.value}</h2>
        <button onClick={this.handleClick}>Press Me</button> {/* this.handleClick()으로 사용하면 rendering을 할 때마다 함수를 부르기 때문에 rendering->setState -> rendering -> setState 무한 반복*/}
      </div>
    )
  }
}

IV. Component Mapping

1. Map() - 파라미터로 전달된 함수를 통하여 배열 내의 각 요소를 처리해서 그 결과로 새로운 배열을 생성합니다.
2. arr.map(callback, [thisArg])
  callback - 새로운 배열의 요소를 생성하는 함수로서 다음 세가지의 인수를 가진다.
    currentValue 현재 처리되고 있는 element
    index 현재 처리되고 있는 element의 index 값
    array method가 불려진 array
  thisArg(선택항목) callback 내부에서 사용 할 this 값 설정

ex)
var numbers = [1,2,3,4,5];
var processed = numbers.map(function(num) {
  return num * num;
})

//In ES6
let numbers = [1,2,3,4,5];
let result = numbers.map((num) => {
  return num*num;
});

** Arrow syntax
let one = a => console.log(a);

/*
var one = function one(a) {
  return console.log(a)
}
*/

let two = (a,b) => console.log(a,b);



let three = (c,d) => {
  console.log(c);
  console.log(d);
}

let four = () => {
  console.log('no params');
}

3. Component Mapping

class ContactInfo extends React.Component {
  render() {
    return (
    <div>
        {this.props.contact.name}
        {this.props.contact.phone}
    </div>
    )
  }
}

class Contact extends React.Component {
  constructor(props){
    super(props);
    this.state = {
      contactData: [
        {name:'Abet', phone:'010-0000-0001'},
        {name:'Betty', phone:'010-0000-0002'},
        {name:'Charlie', phone:'010-0000-0003'},
        {name:'David', phone:'010-0000-0004'},
      ]
    }
  }
  render() {

    const mapToComponent = (data) => {
      return data.map((contact, i) => {
        return (<ContactInfo contact={contact} key ={i}/>);
      });
    };
    return (
    <div>
        {mapToComponent(this.state.contactData)}
    </div>
    )
  }
}

V. React Project Set up
1. Global Dependency 설치
  npm install -g webpack webpack-dev-server
webpack - browser 위에서 import(require)를 할 수 있게 해주고 javascript 파일들을 하나로 합쳐준다.
webpack-dev-server - 별도의 서버를 구축하지 않고도 static 파일을 다루는 웹서버를 열 수 있으며 hot-loader를 통하여 코드가 수정될 때마다 자동으로 리로드 되게 할 수 있다.
** -g를 붙여줘야 console에서 사용하기 편리

2. Project 생성
cd your-project
npm init # node 프로젝트를 시작

3. Dependency 및 Plugin 설치
React 설치
  npm install --save react react-dom # --save가 있어야 package.json의 dependency에 추가됨
development Dependency module 설치
  npm install --save-dev babel-core babel-loader babel-preset-es2015 babel-preset-react
  npm install --save-dev react-hot-loader webpack webpack-dev-server #webpack과 webpack-dev-server같은 경우 global로 설치를 했었어도 여기 있는 loader들이 의존하고 있어서 또 해줘야됨

VI State 내부, 객체 배열 처리하기 | Immutability Helper / ES6 Spread
State 내부 변수를 변경하려면 무조건 setState를 이용해야되는데 array의 경우 어떻게 해야할까?

1. push을 사용하면 배열 자체를 변경해버리기 때문에 concat을 이용해야됨
ex) this. setState({
  list: this.state.list.concat(newObj)
})

2. Immutability Helper (Immutable.js)

npm install --save react-addons-update
import update from 'react-addons-update'

-Add element
this.setState({
  list:update(
    this.state.list,
    {
      $push:[newObj,newObj2]
    }
  )
})
-delete element
this.setState({
  list:update(
    this.state.list,
    {
      $splice:[[index,1]]
    }
  )
})

ex)
const update = React.addons.update;

let array = [
  0,1,2,3,4,5
];

let changedArray = update(array, {
  $splice: [[0,1], [1,1]]
});

function print(data) {
  console.log(JSON.stringify(data, null, 2));
}

print(changedArray); // 1,3,4,5

- update element
this.setState({
  list:update(
    this.state.list,
    {
      [index]:{
        field: {$set:"value"},
        field2: {$set:"value2"}
      }
    }
  )
})

ex)
const update = React.addons.update;

let object = {
  a:'1',
  b:'2',
  c: {
    d:'3',
    e:'4',
    f: {
      change_this_value: '0',
      this_stays_the_same: '6'
    }
  }
};

let changed = update(object, {
  c: {
    f: {
      change_this_value: {
        $set: '5'
      }
    }
  }
});

function print(data) {
  console.log(JSON.stringify(data, null, 2));
}

print(changed); // change_this_value이 5로 바뀜

3.ES6 Spread
npm install --save babel-preset-stage-0
webpack.config.js의 preset에 'stage-0' 추가
ex)presets: ['es2015', 'stage-0', 'react']

ex1)
const update = React.addons.update;

let object = {
  a:'1',
  b:'2',
  c: {
    d:'3',
    e:'4',
    f: {
      change_this_value: '0',
      this_stays_the_same: '6'
    }
  }
};

let changed = {
  ...object,
  b: "hi"
  c: {
    ...object.c,
    f: {
      ...object.c.f,
      change_this_value: '5'
    }
  }
};

console.log(JSON.stringify(changed, null, 2))

ex2)
let array = [1,2,3,4,5,6];
let added = [...array, 7];
let changed = [...array.slice(0,2), 'changed', ...array.slice(3, array.length - 1)];

console.log(JSON.stringify(changed, null, 2)) // [1,2,"changed",4,5]
